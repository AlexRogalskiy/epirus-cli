package <package_name>;

import ch.qos.logback.classic.Level
import <package_name>.generated.contracts.HelloWorld
import io.epirus.web3j.Epirus
import io.epirus.web3j.gas.EpirusGasProvider
import io.epirus.web3j.gas.GasPrice
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.web3j.crypto.CipherException
import org.web3j.crypto.Credentials
import org.web3j.crypto.WalletUtils
import org.web3j.protocol.Network
import org.web3j.protocol.Web3j
import org.web3j.protocol.http.HttpService
import org.web3j.tx.gas.ContractGasProvider
import org.web3j.tx.gas.DefaultGasProvider
import org.web3j.tx.gas.StaticGasProvider

import java.io.File
import java.io.IOException
import java.math.BigInteger
import java.nio.file.Files
import java.nio.file.Paths
import kotlin.system.exitProcess

class <project_name> {

    private val log: Logger = LoggerFactory.getILoggerFactory().getLogger("org.web3j.protocol.http.HttpService")
    private val NODE_URL = "EPIRUS_NODE_URL"
    private val deployNetwork = Network.valueOf(System.getenv().getOrDefault("EPIRUS_DEPLOY_NETWORK", "rinkeby").toUpperCase())

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            <project_name>().start(args)
        }
    }

    fun start(args: Array<String>) {
        log as ch.qos.logback.classic.Logger
        log.level = Level.ERROR
        val walletPath = System.getenv("EPIRUS_WALLET_PATH")
        val walletPassword = System.getenv().getOrDefault("EPIRUS_WALLET_PASSWORD", "")
        val credentials: Credentials? = WalletUtils.loadCredentials(walletPassword, Paths.get(walletPath).toFile())
        val web3j: Web3j? = getDeployWeb3j()
        val helloWorld: HelloWorld? = deployHelloWorld(web3j, credentials, EpirusGasProvider(deployNetwork, GasPrice.High))
        callGreetMethod(helloWorld)
    }

    private fun getDeployWeb3j(): Web3j {
        val nodeUrl = System.getenv().getOrDefault(NODE_URL, System.getProperty(NODE_URL))
        return if (nodeUrl == null || nodeUrl.isEmpty()) {
            Epirus.buildWeb3j(deployNetwork) // deployNetwork = rinkeby/ropsten/mainnet
        } else {
            log.info("Connecting to $nodeUrl")
            Web3j.build(HttpService(nodeUrl))
        }
    }

    @Throws(Exception::class)
    private fun deployHelloWorld(
            web3j: Web3j?,
            credentials: Credentials?,
            contractGasProvider: ContractGasProvider?
    ): HelloWorld? {
        return HelloWorld.deploy(web3j, credentials, contractGasProvider, "Hello Blockchain World!").send()
    }

    @Throws(Exception::class)
    private fun callGreetMethod(helloWorld: HelloWorld?) {
        log.info("Calling the greeting method of contract HelloWorld")
        val response: String = helloWorld?.greeting()!!.send()
        log.info("Contract returned: $response")
        println(String.format("%-20s", "Contract address") + "https://" + deployNetwork.getNetworkName() + ".epirus.io/contracts/" + helloWorld.contractAddress)
        exitProcess(0)
    }
}