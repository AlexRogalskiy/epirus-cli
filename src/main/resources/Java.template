package <package_name>;

import ch.qos.logback.classic.Level;
import <package_name>.generated.contracts.HelloWorld;
import io.epirus.web3j.Epirus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Network;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.gas.ContractGasProvider;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.tx.gas.StaticGasProvider;


import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Paths;

public class <project_name> {

    private static final Logger log = LoggerFactory.getILoggerFactory().getLogger("org.web3j.protocol.http.HttpService");
    private static final String NODE_URL = "NODE_URL";

    public static void main(String[] args) throws Exception {
        try {
            ((ch.qos.logback.classic.Logger) (log)).setLevel(Level.ERROR);
            Credentials credentials = WalletUtils.loadCredentials("<password_file_name>","<wallet_name>");
            Web3j web3j = getDeployWeb3j();
            HelloWorld helloWorld = deployHelloWorld(web3j, credentials, new StaticGasProvider(DefaultGasProvider.GAS_LIMIT, BigInteger.valueOf(7500000L)));
            callGreetMethod(helloWorld);
        } catch (Exception e) {
            log.info(e.getMessage());
        }
    }

    private static Web3j getDeployWeb3j() throws Exception {
        String nodeUrl = System.getenv().getOrDefault(NODE_URL, System.getProperty(NODE_URL));
        if (nodeUrl == null || nodeUrl.isEmpty()) {
            return Epirus.buildWeb3j(Network.valueOf(System.getenv().getOrDefault("DEPLOY_NETWORK", "rinkeby").toUpperCase()));
        } else {
            log.info("Connecting to $nodeUrl");
            return Web3j.build(new HttpService(nodeUrl));
        }
    }

    private static HelloWorld deployHelloWorld(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) throws Exception {
        return HelloWorld.deploy(web3j, credentials, contractGasProvider, "Hello Blockchain World!").send();
    }

    private static void callGreetMethod(HelloWorld helloWorld) throws Exception {
        log.info("Calling the greeting method of contract HelloWorld");
        String response = helloWorld.greeting().send();
        log.info("Contract returned: " + response);
        System.out.println(String.format("%-20s", "Contract address") + "https://rinkeby.epirus.io/contracts/" + helloWorld.getContractAddress());
        System.exit(0);

    }
}